//  Copyright (c)2011 Core CG
//  All rights reserved
//  www.core-cg.com

//****************************************************************************
// Contains Maya node classificaation strings for known mental ray shaders.
//****************************************************************************

global proc string mentalrayCustomNodeClass(string $nodeType)
{
	assignViewportFactories -materialFactory "MentalRayMaterial"
							-textureFactory "MentalRayTexture"
							-nodeType $nodeType;

	// Materials, Material surface shaders.
	// Provides additional functionalities on top of
	// Material shaders(rendernode/mentalray/material).
	// "Assign New Material", "Assign Existing Material" RMB,
	// Created with a SG.
	// RMB on the node.

	// mia_material needs 3 connections as a default. The connection/*
	// classifications only affect the defualt connection to the
	// shading engine without interfering with the create node panels
	
	
	////////////////
	// MENTALCORE //
	////////////////
	
	//Disable swatches?
	$swatches = ":swatch/mentalRaySwatchGen";
	if(`optionVar -query "MC_DISABLE_SWATCHES"`)
		$swatches = "";
		
	
	if ($nodeType == "core_material" ||
		$nodeType == "core_mia_material")
		return ("rendernode/mentalray/material:connection/mentalray/shadow:/connection/mentalray/photon:shader/surface" + $swatches + ":drawdb/shader/surface/mentalray/mia_material");
	
	if ($nodeType == "core_carpaint2")
		return ("rendernode/mentalray/material:connection/mentalray/shadow:shader/surface" + $swatches + ":drawdb/shader/surface/mentalray/mi_car_paint_phen");
		
	if ($nodeType == "core_blend_materials")
		return ("rendernode/mentalray/material:connection/mentalray/shadow:/connection/mentalray/photon:shader/surface" + $swatches);

	if ($nodeType == "core_surface_shader" ||
		$nodeType == "core_hair")
		return ("rendernode/mentalray/material:connection/mentalray/shadow:shader/surface" + $swatches);
		
	if ($nodeType == "core_chameleon")
		return ("rendernode/mentalray/material:connection/mentalray/shadow:shader/surface");
		
	if ($nodeType == "core_simple_sss" ||
		$nodeType == "core_skin_sss" ||
		$nodeType == "core_sss_color_bleed")
		return ("rendernode/mentalray/material:shader/surface" + $swatches);

	if ($nodeType == "core_texture_blend" ||
		$nodeType == "core_texture_merge" ||
		$nodeType == "core_colour_grade" ||
		$nodeType == "core_texture_lookup2" ||
		$nodeType == "core_texture_blur")
		return ("rendernode/mentalray/texture" + $swatches);
		
	if ($nodeType == "core_colourprofile")
		return "rendernode/mentalray/texture";
		
	if ($nodeType == "core_color_to_scalar" ||
		$nodeType == "core_scalar_to_color" ||
		$nodeType == "core_scalar_to_uv" ||
		$nodeType == "core_scalar_to_vector" ||
		$nodeType == "core_color_to_vector" ||
		$nodeType == "core_vector_to_color")
		return ("rendernode/mentalray/conversion" + $swatches);
		
	if ($nodeType == "core_globals" ||
		$nodeType == "core_state" ||
		$nodeType == "core_lens" ||
		$nodeType == "core_env_rayswitch" ||
		$nodeType == "core_env_light_base" ||
		$nodeType == "core_mia_wrapper" ||
		$nodeType == "core_carpaint_wrapper" ||
		$nodeType == "core_pass_sss" ||
		$nodeType == "core_material_override" ||
		$nodeType == "core_sss_irradiance" ||
		$nodeType == "core_normaloutput" ||
		$nodeType == "core_simple_sss2" ||
		$nodeType == "core_skin_sss2" ||
		$nodeType == "core_texture_lookup" ||
		$nodeType == "core_carpaint")
		return "rendernode/mentalray/internal";
		
	////////////////////
	// END MENTALCORE //
	////////////////////
	

	if ($nodeType == "mia_material" ||
		$nodeType == "mia_material_x" ||
		$nodeType == "mia_material_x_passes")
		return "rendernode/mentalray/material:connection/mentalray/shadow:/connection/mentalray/photon:shader/surface:swatch/mentalRaySwatchGen:drawdb/shader/surface/mentalray/mia_material";

	if ($nodeType == "misss_fast_shader" ||
	    $nodeType == "misss_fast_shader_x" ||
	    $nodeType == "misss_fast_shader_x_passes")
		return "rendernode/mentalray/material:shader/surface:swatch/mentalRaySwatchGen:drawdb/shader/surface/mentalray/misss_fast_shader";

	if ($nodeType == "mi_car_paint_phen" ||
	    $nodeType == "mi_car_paint_phen_x" ||
	    $nodeType == "mi_car_paint_phen_x_passes")
		return "rendernode/mentalray/material:shader/surface:swatch/mentalRaySwatchGen:drawdb/shader/surface/mentalray/mi_car_paint_phen";

	if ($nodeType == "mi_metallic_paint" ||
	    $nodeType == "mi_metallic_paint_x" ||
	    $nodeType == "mi_metallic_paint_x_passes")
		return "rendernode/mentalray/material:shader/surface:swatch/mentalRaySwatchGen:drawdb/shader/surface/mentalray/mi_metallic_paint";

	if ($nodeType == "transmat" ||
		$nodeType == "misss_physical" ||
		$nodeType == "dgs_material" ||
		$nodeType == "dielectric_material" )
		return "rendernode/mentalray/material:/connection/mentalray/photon:shader/surface:swatch/mentalRaySwatchGen";

	if ($nodeType == "mib_illum_lambert" ||
	    $nodeType == "mib_illum_phong" ||
	    $nodeType == "mib_illum_blinn" ||
	    $nodeType == "mib_illum_cooktorr" ||
	    $nodeType == "mib_illum_ward" ||
	    $nodeType == "mib_illum_ward_deriv" ||
	    $nodeType == "mib_illum_hair" ||
	    $nodeType == "path_material" ||
	    $nodeType == "misss_call_shader" ||
	    $nodeType == "misss_fast_simple_maya" ||
	    $nodeType == "misss_fast_skin_maya" ||
	    $nodeType == "misss_skin_specular" )
		return "rendernode/mentalray/material:shader/surface:swatch/mentalRaySwatchGen";

	// texture shaders supported by swatch
	if( $nodeType == "mib_texture_checkerboard" ||
		$nodeType == "mib_texture_polkadot" ||
		$nodeType == "mib_texture_polkasphere" ||
		$nodeType == "mib_texture_turbulence" ||
		$nodeType == "mib_amb_occlusion" ||
		$nodeType == "mib_texture_wave" ||
		$nodeType == "mib_texture_lookup" ||
		$nodeType == "mib_texture_lookup2" ||
		$nodeType == "mib_texture_filter_lookup" ||
		$nodeType == "mib_fast_occlusion" )
		return "rendernode/mentalray/texture:swatch/mentalRaySwatchGen";

	// Contour
	// Contour store functions

	if ($nodeType == "contour_store_function" ||
	    $nodeType == "contour_store_function_simple" )
		return "rendernode/mentalray/contour/store";

	// Contour contrast functions

	if ($nodeType == "contour_contrast_function_levels" ||
	    $nodeType == "contour_contrast_function_simple" )
		return "rendernode/mentalray/contour/contrast";

	// Contour shaders

	if ($nodeType == "contour_shader_simple" ||
	    $nodeType == "contour_shader_randomwidth" ||
	    $nodeType == "contour_shader_randomtransparency" ||
	    $nodeType == "contour_shader_silhouette" ||
	    $nodeType == "contour_shader_maxcolor" ||
	    $nodeType == "contour_shader_curvature" ||
	    $nodeType == "contour_shader_factorcolor" ||
	    $nodeType == "contour_shader_depthfade" ||
	    $nodeType == "contour_shader_framefade" ||
	    $nodeType == "contour_shader_layerthinner" ||
	    $nodeType == "contour_shader_widthfromcolor" ||
	    $nodeType == "contour_shader_widthfromlightdir" ||
	    $nodeType == "contour_shader_widthfromlight" ||
	    $nodeType == "contour_shader_combi" )

		return "rendernode/mentalray/contour/shader";

	// Contour output shaders

	if ($nodeType == "contour_only" ||
	    $nodeType == "contour_composite" ||
	    $nodeType == "contour_ps" )

		return "rendernode/mentalray/contour/output";

	// Sample Compositing

	if ($nodeType == "mib_reflect" ||
	    $nodeType == "mib_refract" ||
	    $nodeType == "mib_transparency" ||
	    $nodeType == "mib_opacity" ||
	    $nodeType == "mib_dielectric" ||
	    $nodeType == "mib_twosided" ||
	    $nodeType == "mib_refraction_index" ||
	    $nodeType == "mib_continue" )

		return "rendernode/mentalray/composite:swatch/mentalRaySwatchGen";

	// Data Conversion

	if ($nodeType == "mib_color_alpha" ||
	    $nodeType == "mib_color_average" ||
	    $nodeType == "mib_color_intensity" ||
	    $nodeType == "mib_color_interpolate" ||
	    $nodeType == "mib_color_mix" ||
	    $nodeType == "mib_color_spread" )

		return "rendernode/mentalray/conversion:swatch/mentalRaySwatchGen";

	// Internal MentalRay Nodes. Not meant to be used with Maya.
	int $enableMIPShaders = (`optionVar -query "MIP_SHD_EXPOSE"`== 1);
	int $enableMAPShaders = (`optionVar -query "MAP_SHD_EXPOSE"`== 1);

	if ((($nodeType == "mip_rayswitch" ||
	    $nodeType == "mip_rayswitch_advanced" ||
	    $nodeType == "mip_rayswitch_stage" ||
	    $nodeType == "mip_rayswitch_environment" ||
	    $nodeType == "mip_card_opacity" ||
	    $nodeType == "mip_fgshooter" ||
	    $nodeType == "mip_motionblur" ||
	    $nodeType == "mip_matteshadow" ||
	    $nodeType == "mip_cameramap" ||
	    $nodeType == "mip_mirrorball" ||
	    $nodeType == "mip_grayball" ||
	    $nodeType == "mip_gamma_gain" ||
	    $nodeType == "mip_render_subset" ||
	    $nodeType == "mip_matteshadow_mtl" ||
	    $nodeType == "mip_motion_vector" ||
	    $nodeType == "mip_binaryproxy"
	    ) &&
	    $enableMIPShaders == 0 ) ||
	  (($nodeType == "mib_map_get_scalar" ||
	    $nodeType == "mib_map_get_integer" ||
	    $nodeType == "mib_map_get_vector" ||
	    $nodeType == "mib_map_get_color" ||
	    $nodeType == "mib_map_get_transform" ||
	    $nodeType == "mib_map_get_scalar_array" ||
	    $nodeType == "mib_map_get_integer_array" ) &&
	    $enableMAPShaders == 0 ) ||
	    $nodeType == "misss_physical_phen"  ||
	    $nodeType == "mi_metallic_paint_output_mixer" ||
	    $nodeType == "surfaceSampler" )

		return "rendernode/mentalray/internal";

	return "";
}

