#script_param_mark#
import os,sys,shutil


print 'copyBasePy...start'
nodePyDir=r'c:\script\py'
if G_RENDEROS=='Linux':
    nodePyDir=r'/root/rayvision/script/py'
if not os.path.exists(nodePyDir):
    os.makedirs(nodePyDir)

def copyPyFolder(pyFolder):
    if os.path.exists(pyFolder):
        for root, dirs, files in os.walk(pyFolder):
            print 'copyBasePy...'
            for i in xrange (0, files.__len__()):
                sf = os.path.join(root, files[i])
                shutil.copy(sf,nodePyDir)
                
def copyFolder(source,target):
    if not os.path.exists(target):
        os.makedirs(target)
    if os.path.exists(source):
        for root, dirs, files in os.walk(source):
            print 'copyBasePy...'
            for dirname in  dirs:
                tdir=os.path.join(root,dirname)
                if not os.path.exists(tdir):
                    os.makedirs(tdir)
            for i in xrange (0, files.__len__()):
                sf = os.path.join(root, files[i])
                folder=target+root[len(source):len(root)]+"/"
                if not os.path.exists(folder):
                    os.makedirs(folder)
                shutil.copy(sf,folder)
                

cgList=['Nuke']
if G_CG_NAME in cgList:
#if os.path.exists(scriptCg):
    script2=G_POOL+'\\script2'
    scriptBase=script2+'\\Base'
    scriptCg=script2+'\\'+G_CG_NAME
    scriptNodeBase=nodePyDir+'\\Base'
    scriptNodeCg=nodePyDir+'\\'+G_CG_NAME
    print script2
    print scriptBase
    print scriptCg

    userRenderPy=script2+'\\user\\'+G_USERID
    shutil.rmtree(nodePyDir)
    copyFolder(scriptBase,scriptNodeBase)
    copyFolder(scriptCg,scriptNodeCg)
    copyFolder(userRenderPy,nodePyDir)
    sys.path.append(scriptNodeBase)
else:
    copyPyFolder(baseRenderPy)
    copyPyFolder(userRenderPy)
    
print 'copyBasePy...end'
#-----------------------------------------------------
sys.path.append(nodePyDir)

import AnalyseAction


if(__name__=="__main__"):
    paramDict = {'G_USERID':G_USERID,'G_USERID_PARENT':G_USERID_PARENT,'G_TASKID':G_TASKID,'G_CG_NAME':G_CG_NAME,'G_NODE_PY':nodePyDir,'G_SYS_ARGVS':sys.argv,'G_POOL':G_POOL,'G_RENDEROS':G_RENDEROS,'G_CONFIG':G_CONFIG,'G_PLUGINS':G_PLUGINS}
    AnalyseAction.main(**paramDict)


##BEGIN
##description=This is a helper script
##name=helper.py
##nodelimit=100
##requirements=
##properties=
##level=98
##constraint=
##custom=cc

##JOBS G_JOB_ID 

##'helperJob'	

##ENDJOBS

##END
